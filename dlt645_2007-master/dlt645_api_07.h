/*******************************************************************************
    File name:         dlt645_api_07.h
    Author:         ????
    Version:          1.0
    Date:            2012??10??22??
    Description:     dlt645 2007???????????????????????????????????????
                    ????????????????????                 
    Others:       
    Function List: 
    1. History: 
                    
          1)  Date:
          2)  Author:
          3)  Modification:  Created
    2. ...
*******************************************************************************/
#ifndef _DLT645_API_2007_H_
#define _DLT645_API_2007_H_

#define D07_ON 1
#define D07_OFF 0

#define g_out_data_07 "error"



#pragma pack(push)  // ???????????
#pragma pack(1)

/* ??????? */
#define D07_DEBUG_ON
#undef D07_DEBUG_ON   // ?????????


#ifdef D07_DEBUG_ON

#define OUT_BUF_LEN 1024
#define D07_ON  0
#define D07_OFF 1

extern int g_need_pack_07;
extern char g_out_data_07[OUT_BUF_LEN];

#endif



#ifndef _TYPE_DEF_LM_
#define _TYPE_DEF_LM_
#ifndef __RTL_H__
#define __RTL_H__
typedef char    BOOL;
#endif
#define TRUE    (1)
#define FALSE   (0)
typedef unsigned char UCHAR;
typedef char    CHAR;
typedef unsigned short USHORT;
typedef short   SHORT;

typedef unsigned long ULONG;
typedef long    LONG;

#ifndef _TYPE_DEF_
#define _TYPE_DEF_
typedef char            INT8;       //c
typedef short           INT16;      //s
typedef int             INT32;      //l
typedef unsigned char   UINT8;      //uc
typedef unsigned short  UINT16;     //us
typedef unsigned int    UINT32;     //ul

#ifdef MACHINE_64_BITS
typedef long             INT64;
typedef unsigned   long  UINT64;
#else
typedef long  long           INT64;
typedef unsigned long  long  UINT64;
#endif

typedef char*           STRING;     //str
typedef char            ISBOOL;     //b
typedef unsigned int    IPADDR;     //ip
typedef double          DOUBLE;
typedef void*  FRWK_HANDLE;

#endif
#endif



/* ???? **/
#define NAME_LEN              128   
#define UNKNOWN_RULER_ID     0XFFFFFFFF
#define D07_ADDR_LEN         12                      /* ????? */
#define D07_DATA_MAX_NR      240                       /* dlt645 2007 ??????????????????ID */
#define D07_DATA_MAX         (D07_DATA_MAX_NR + 4)   /* dlt645 2007 ?????????????? */
#define D07_FRAME_LEN_MIN    12                        /* DLT645 2007 ?????????? */  

/*?????? 2007*/
#define D07_CTRL_RESV                                0x00     // ????
#define D07_CTRL_SYNC_TIME                            0x08     // ?????
#define D07_CTRL_READ_DATA                            0x11    // ??????
#define D07_CTRL_READ_AFTERDATA                        0x12    // ??????????
#define D07_CTRL_READ_ADDR                            0x13    // ???????
#define D07_CTRL_WRITE_DATA                            0x14    // ??????
#define D07_CTRL_WRITE_ADDR                            0x15    // ???????
#define D07_CTRL_FREEZ_COMM                            0x16    // ????????
#define D07_CTRL_MODIFY_BAUD                        0x17    // ??????????
#define D07_CTRL_MODIFY_PASSWORD                    0x18    // ???????
#define D07_CTRL_CLEAR_MAXDEMAND                    0x19    // ???????????
#define D07_CTRL_CLEAR_METER                        0x1A    // ???????
#define D07_CTRL_CLEAR_EVENT                        0x1B    // ???????
#define D07_CTRL_COMM                                0x1C    // ????????




/** ???? */


/* ????????? ????*/
typedef enum
{
    E_D07_OK = 0,            /* ????OK */
    E_D07_ERRO_NULL,        /* ?????? */
    E_D07_ERRO_UNKOWN_ID,    // ??????ID
    E_D07_ERRO_PARA_NONE,   /* ?????? */
    E_D07_ERRO_PARA_OUT_RANGE,
    
    //check frame
    E_D07_ERRO_FRAME_UNCOMP,        /* ????????????? */
    E_D07_ERRO_FRAME_0x68,          /* ??????????? 0x68 ?????????? */
    E_D07_ERRO_FRAME_CHECK_SUM,     /* ????????????? */
    E_D07_ERRO_FRAME_END_0x16,      /* ??????????? 0x16 ???? */
    E_D07_ERRO_NONE_FRAME,          // ???????

}eD07Err;









/* dlt645 2007??????? **/
typedef enum
{
    E_D07_RULER_TYPE_UNKNOWN  =  0,                         // ???????????

    /* ??????? */
    E_D07_RULER_TYPE_A1_MIN,
    
    /* [00] [00] [(00~FF)] [00] */
    E_D07_RULER_TYPE_COMB_HAVE_POWER_TOTAL = E_D07_RULER_TYPE_A1_MIN,// ????????????
    E_D07_RULER_TYPE_COMB_HAVE_POWER_RATE,            // ??????????????
    E_D07_RULER_TYPE_COMB_HAVE_POWER_BLOCK,            // ??????????????

    /* [00] [01] [(00~FF)] [00] */
    E_D07_RULER_TYPE_FORTH_HAVE_POWER_TOTAL,        // ?????????????
    E_D07_RULER_TYPE_FORTH_HAVE_POWER_RATE,            // ???????????????
    E_D07_RULER_TYPE_FORTH_HAVE_POWER_BLOCK,        // ?????????????????

    /* [00] [02] [(00~FF)] [00] */
    E_D07_RULER_TYPE_BACK_HAVE_POWER_TOTAL,            // ?????????????
    E_D07_RULER_TYPE_BACK_HAVE_POWER_RATE,            // ???????????????
    E_D07_RULER_TYPE_BACK_HAVE_POWER_BLOCK,            // ?????????????????

    /* [00] [03] [(00~FF)] [00] */
    E_D07_RULER_TYPE_COMB_NONE_1_POWER_TOTAL,        // ??????1?????
    E_D07_RULER_TYPE_COMB_NONE_1_POWER_RATE,        // ??????1???????
    E_D07_RULER_TYPE_COMB_NONE_1_POWER_BLOCK,        // ??????1?????????

    /* [00] [04] [(00~FF)] [00] */
    E_D07_RULER_TYPE_COMB_NONE_2_POWER_TOTAL,        // ??????2?????
    E_D07_RULER_TYPE_COMB_NONE_2_POWER_RATE,        // ??????2???????
    E_D07_RULER_TYPE_COMB_NONE_2_POWER_BLOCK,        // ??????2?????????

    /* [00] [05] [(00~FF)] [00] */
    E_D07_RULER_TYPE_QUAD_1_NONE_POWER_TOTAL,        // ???????????????
    E_D07_RULER_TYPE_QUAD_1_NONE_POWER_RATE,        // ?????????????????
    E_D07_RULER_TYPE_QUAD_1_NONE_POWER_BLOCK,        // ???????????????????

    /* [00] [06] [(00~FF)] [00] */
    E_D07_RULER_TYPE_QUAD_2_NONE_POWER_TOTAL,        // ???????????????
    E_D07_RULER_TYPE_QUAD_2_NONE_POWER_RATE,        // ?????????????????
    E_D07_RULER_TYPE_QUAD_2_NONE_POWER_BLOCK,        // ???????????????????

    /* [00] [07] [(00~FF)] [00] */
    E_D07_RULER_TYPE_QUAD_3_NONE_POWER_TOTAL,        // ????????????????
    E_D07_RULER_TYPE_QUAD_3_NONE_POWER_RATE,        // ??????????????????
    E_D07_RULER_TYPE_QUAD_3_NONE_POWER_BLOCK,        // ????????????????????

    /* [00] [08] [(00~FF)] [00] */
    E_D07_RULER_TYPE_QUAD_4_NONE_POWER_TOTAL,        // ????????????????
    E_D07_RULER_TYPE_QUAD_4_NONE_POWER_RATE,        // ??????????????????
    E_D07_RULER_TYPE_QUAD_4_NONE_POWER_BLOCK,        // ????????????????????

    /* [00] [09] [(00~FF)] [00] */
    E_D07_RULER_TYPE_FORTH_APPARENT_POWER_TOTAL,    // ?????????????
    E_D07_RULER_TYPE_FORTH_APPARENT_POWER_RATE,        // ??????????????
    E_D07_RULER_TYPE_FORTH_APPARENT_POWER_BLOCK,    // ????????????????

    /* [00] [0A] [(00~FF)] [00] */
    E_D07_RULER_TYPE_BACK_APPARENT_POWER_TOTAL,        // ?????????????
    E_D07_RULER_TYPE_BACK_APPARENT_POWER_RATE,        // ??????????????
    E_D07_RULER_TYPE_BACK_APPARENT_POWER_BLOCK,        // ????????????????

    /* [00] [80][00] [00] */
    E_D07_RULER_TYPE_ASSO_POWER_TOTAL,                // ?????????

    /* [00] [81][00] [00] */
    E_D07_RULER_TYPE_FORTH_FUND_HAVE_POWER_TOTAL,    // ?????????????????

    /* [00] [82][00] [00] */
    E_D07_RULER_TYPE_BACK_FUND_HAVE_POWER_TOTAL,    // ?????????????????

    /* [00] [83][00] [00] */
    E_D07_RULER_TYPE_FORTH_HARM_HAVE_POWER_TOTAL,    // ?????????????????

    /* [00] [84][00] [00] */
    E_D07_RULER_TYPE_BACK_HARM_HAVE_POWER_TOTAL,    // ?????????????????

    /* [00] [85][00] [00] */
    E_D07_RULER_TYPE_COPR_LOSS_HAVE_POWER_COMP_TOTAL,       // ?????????????????

    /* [00] [86][00] [00] */
    E_D07_RULER_TYPE_CORE_LOSS_HAVE_POWER_COMP_TOTAL,        // ??????????????????

    /* [00] [(15~9A)][00] [00] */
    E_D07_RULER_TYPE_PHASE_A_FORTH_HAVE_POWER,                // A??????????????
    E_D07_RULER_TYPE_PHASE_A_BACK_HAVE_POWER,                // A????????????
    E_D07_RULER_TYPE_PHASE_A_COMB_NONE_1_POWER,              // A????????1????
    E_D07_RULER_TYPE_PHASE_A_COMB_NONE_2_POWER,                // A????????2????
    E_D07_RULER_TYPE_PHASE_A_QUAD_1_NONE_POWER,              // A???????????????
    E_D07_RULER_TYPE_PHASE_A_QUAD_2_NONE_POWER,                // A???????????????
    E_D07_RULER_TYPE_PHASE_A_QUAD_3_NONE_POWER,                // A????????????????
    E_D07_RULER_TYPE_PHASE_A_QUAD_4_NONE_POWER,                // A????????????????
    E_D07_RULER_TYPE_PHASE_A_FORTH_APPARENT_POWER,            // A?????????????
    E_D07_RULER_TYPE_PHASE_A_BACK_APPARENT_POWER,            // A???????????
    E_D07_RULER_TYPE_PHASE_A_ASSO_POWER,                    // A?????????
    E_D07_RULER_TYPE_PHASE_A_FORTH_FUND_HAVE_POWER,            // A??????????????????
    E_D07_RULER_TYPE_PHASE_A_BACK_FUND_HAVE_POWER,            // A????????????????
    E_D07_RULER_TYPE_PHASE_A_FORTH_HARM_HAVE_POWER,            // A??????????????????
    E_D07_RULER_TYPE_PHASE_A_BACK_HARM_HAVE_POWER,            // A????????????????
    E_D07_RULER_TYPE_PHASE_A_COPR_LOSS_HAVE_POWER_COMP,       // A??????????????????
    E_D07_RULER_TYPE_PHASE_A_CORE_LOSS_HAVE_POWER_COMP,        // A???????????????????


    /* [00] [(29~AE)][00] [00] */
    E_D07_RULER_TYPE_PHASE_B_FORTH_HAVE_POWER,                // B??????????????
    E_D07_RULER_TYPE_PHASE_B_BACK_HAVE_POWER,                // B????????????
    E_D07_RULER_TYPE_PHASE_B_COMB_NONE_1_POWER,              // B????????1????
    E_D07_RULER_TYPE_PHASE_B_COMB_NONE_2_POWER,                // B????????2????
    E_D07_RULER_TYPE_PHASE_B_QUAD_1_NONE_POWER,              // B???????????????
    E_D07_RULER_TYPE_PHASE_B_QUAD_2_NONE_POWER,                // B???????????????
    E_D07_RULER_TYPE_PHASE_B_QUAD_3_NONE_POWER,                // B????????????????
    E_D07_RULER_TYPE_PHASE_B_QUAD_4_NONE_POWER,                // B????????????????
    E_D07_RULER_TYPE_PHASE_B_FORTH_APPARENT_POWER,            // B?????????????
    E_D07_RULER_TYPE_PHASE_B_BACK_APPARENT_POWER,            // B???????????
    E_D07_RULER_TYPE_PHASE_B_ASSO_POWER,                    // B?????????
    E_D07_RULER_TYPE_PHASE_B_FORTH_FUND_HAVE_POWER,            // B??????????????????
    E_D07_RULER_TYPE_PHASE_B_BACK_FUND_HAVE_POWER,            // B????????????????
    E_D07_RULER_TYPE_PHASE_B_FORTH_HARM_HAVE_POWER,            // B??????????????????
    E_D07_RULER_TYPE_PHASE_B_BACK_HARM_HAVE_POWER,            // B????????????????
    E_D07_RULER_TYPE_PHASE_B_COPR_LOSS_HAVE_POWER_COMP,       // B??????????????????
    E_D07_RULER_TYPE_PHASE_B_CORE_LOSS_HAVE_POWER_COMP,        // B???????????????????


    /* [00] [(3D~C2)][00] [00] */
    E_D07_RULER_TYPE_PHASE_C_FORTH_HAVE_POWER,                // C??????????????
    E_D07_RULER_TYPE_PHASE_C_BACK_HAVE_POWER,                // C????????????
    E_D07_RULER_TYPE_PHASE_C_COMB_NONE_1_POWER,              // C????????1????
    E_D07_RULER_TYPE_PHASE_C_COMB_NONE_2_POWER,                // C????????2????
    E_D07_RULER_TYPE_PHASE_C_QUAD_1_NONE_POWER,              // C???????????????
    E_D07_RULER_TYPE_PHASE_C_QUAD_2_NONE_POWER,                // C???????????????
    E_D07_RULER_TYPE_PHASE_C_QUAD_3_NONE_POWER,                // C????????????????
    E_D07_RULER_TYPE_PHASE_C_QUAD_4_NONE_POWER,                // C????????????????
    E_D07_RULER_TYPE_PHASE_C_FORTH_APPARENT_POWER,            // C?????????????
    E_D07_RULER_TYPE_PHASE_C_BACK_APPARENT_POWER,            // C???????????
    E_D07_RULER_TYPE_PHASE_C_ASSO_POWER,                    // C?????????
    E_D07_RULER_TYPE_PHASE_C_FORTH_FUND_HAVE_POWER,            // C??????????????????
    E_D07_RULER_TYPE_PHASE_C_BACK_FUND_HAVE_POWER,            // C????????????????
    E_D07_RULER_TYPE_PHASE_C_FORTH_HARM_HAVE_POWER,            // C??????????????????
    E_D07_RULER_TYPE_PHASE_C_BACK_HARM_HAVE_POWER,            // C????????????????
    E_D07_RULER_TYPE_PHASE_C_COPR_LOSS_HAVE_POWER_COMP,       // C??????????????????
    E_D07_RULER_TYPE_PHASE_C_CORE_LOSS_HAVE_POWER_COMP,        // C???????????????????


    // ?????A.1???????????????????? */
    E_D07_RULER_TYPE_A1_MAX = E_D07_RULER_TYPE_PHASE_C_CORE_LOSS_HAVE_POWER_COMP,        

    /* ?????A.2 */
    E_D07_RULER_TYPE_A2_MIN,
    
    /* [01] [00] [(00~FF)] [00] */

    /* [01] [01] [(00~FF)] [00] */
    E_D07_RULER_TYPE_FORTH_HAVE_DEMAND_TOTAL = E_D07_RULER_TYPE_A2_MIN,        // ??????????????????????????
    E_D07_RULER_TYPE_FORTH_HAVE_DEMAND_RATE,                // ????????????????????????????
    E_D07_RULER_TYPE_FORTH_HAVE_DEMAND_BLOCK,                // ?????????????????????????????

    /* [01] [02] [(00~FF)] [00] */
    E_D07_RULER_TYPE_BACK_HAVE_DEMAND_TOTAL,                // ??????????????????????????
    E_D07_RULER_TYPE_BACK_HAVE_DEMAND_RATE,                    // ????????????????????????????
    E_D07_RULER_TYPE_BACK_HAVE_DEMAND_BLOCK,                // ?????????????????????????????

    /* [01] [03] [(00~FF)] [00] */
    E_D07_RULER_TYPE_COMB_NONE_1_DEMAND_TOTAL,                // ??????1??????????????????
    E_D07_RULER_TYPE_COMB_NONE_1_DEMAND_RATE,                // ??????1????????????????????
    E_D07_RULER_TYPE_COMB_NONE_1_DEMAND_BLOCK,                // ??????1?????????????????????

    /* [01] [04] [(00~FF)] [00] */
    E_D07_RULER_TYPE_COMB_NONE_2_DEMAND_TOTAL,                // ??????2??????????????????
    E_D07_RULER_TYPE_COMB_NONE_2_DEMAND_RATE,                // ??????2????????????????????
    E_D07_RULER_TYPE_COMB_NONE_2_DEMAND_BLOCK,                // ??????2?????????????????????

    /* [01] [05] [(00~FF)] [00] */
    E_D07_RULER_TYPE_QUAD_1_NONE_DEMAND_TOTAL,                // ????????????????????????????
    E_D07_RULER_TYPE_QUAD_1_NONE_DEMAND_RATE,                // ??????????????????????????????
    E_D07_RULER_TYPE_QUAD_1_NONE_DEMAND_BLOCK,                // ???????????????????????????????

    /* [01] [06] [(00~FF)] [00] */
    E_D07_RULER_TYPE_QUAD_2_NONE_DEMAND_TOTAL,                // ????????????????????????????
    E_D07_RULER_TYPE_QUAD_2_NONE_DEMAND_RATE,                // ??????????????????????????????
    E_D07_RULER_TYPE_QUAD_2_NONE_DEMAND_BLOCK,                // ???????????????????????????????

    /* [01] [07] [(00~FF)] [00] */
    E_D07_RULER_TYPE_QUAD_3_NONE_DEMAND_TOTAL,                // ?????????????????????????????
    E_D07_RULER_TYPE_QUAD_3_NONE_DEMAND_RATE,                // ???????????????????????????????
    E_D07_RULER_TYPE_QUAD_3_NONE_DEMAND_BLOCK,                // ????????????????????????????????

    /* [01] [08] [(00~FF)] [00] */
    E_D07_RULER_TYPE_QUAD_4_NONE_DEMAND_TOTAL,                // ?????????????????????????????
    E_D07_RULER_TYPE_QUAD_4_NONE_DEMAND_RATE,                // ???????????????????????????????
    E_D07_RULER_TYPE_QUAD_4_NONE_DEMAND_BLOCK,                // ????????????????????????????????

    /* [01] [09] [(00~FF)] [00] */
    E_D07_RULER_TYPE_FORTH_APPARENT_DEMAND_TOTAL,            // ??????????????????????????
    E_D07_RULER_TYPE_FORTH_APPARENT_DEMAND_RATE,            // ???????????????????????????
    E_D07_RULER_TYPE_FORTH_APPARENT_DEMAND_BLOCK,            // ?????????????????????????????

    /* [01] [0A] [(00~FF)] [00] */
    E_D07_RULER_TYPE_BACK_APPARENT_DEMAND_TOTAL,            // ??????????????????????????
    E_D07_RULER_TYPE_BACK_APPARENT_DEMAND_RATE,                // ???????????????????????????
    E_D07_RULER_TYPE_BACK_APPARENT_DEMAND_BLOCK,            // ?????????????????????????????

    /* [01] [(15~9A)][00] [00] */
    E_D07_RULER_TYPE_PHASE_A_FORTH_HAVE_DEMAND,                // A??????????????????????????
    E_D07_RULER_TYPE_PHASE_A_BACK_HAVE_DEMAND,                // A????????????????????????
    E_D07_RULER_TYPE_PHASE_A_COMB_NONE_1_DEMAND,              // A????????1????????????????
    E_D07_RULER_TYPE_PHASE_A_COMB_NONE_2_DEMAND,            // A????????2????????????????
    E_D07_RULER_TYPE_PHASE_A_QUAD_1_NONE_DEMAND,              // A???????????????????????????
    E_D07_RULER_TYPE_PHASE_A_QUAD_2_NONE_DEMAND,            // A???????????????????????????
    E_D07_RULER_TYPE_PHASE_A_QUAD_3_NONE_DEMAND,            // A????????????????????????????
    E_D07_RULER_TYPE_PHASE_A_QUAD_4_NONE_DEMAND,            // A????????????????????????????
    E_D07_RULER_TYPE_PHASE_A_FORTH_APPARENT_DEMAND,            // A??????????????????????????
    E_D07_RULER_TYPE_PHASE_A_BACK_APPARENT_DEMAND,            // A????????????????????????


    /* [01] [(29~AE)][00] [00] */
    E_D07_RULER_TYPE_PHASE_B_FORTH_HAVE_DEMAND,                // B??????????????????????????
    E_D07_RULER_TYPE_PHASE_B_BACK_HAVE_DEMAND,                // B????????????????????????
    E_D07_RULER_TYPE_PHASE_B_COMB_NONE_1_DEMAND,              // B????????1????????????????
    E_D07_RULER_TYPE_PHASE_B_COMB_NONE_2_DEMAND,            // B????????2????????????????
    E_D07_RULER_TYPE_PHASE_B_QUAD_1_NONE_DEMAND,              // B???????????????????????????
    E_D07_RULER_TYPE_PHASE_B_QUAD_2_NONE_DEMAND,            // B???????????????????????????
    E_D07_RULER_TYPE_PHASE_B_QUAD_3_NONE_DEMAND,            // B????????????????????????????
    E_D07_RULER_TYPE_PHASE_B_QUAD_4_NONE_DEMAND,            // B????????????????????????????
    E_D07_RULER_TYPE_PHASE_B_FORTH_APPARENT_DEMAND,            // B??????????????????????????
    E_D07_RULER_TYPE_PHASE_B_BACK_APPARENT_DEMAND,            // B????????????????????????

    /* [01] [(3D~C2)][00] [00] */
    E_D07_RULER_TYPE_PHASE_C_FORTH_HAVE_DEMAND,                // C??????????????????????????
    E_D07_RULER_TYPE_PHASE_C_BACK_HAVE_DEMAND,                // C????????????????????????
    E_D07_RULER_TYPE_PHASE_C_COMB_NONE_1_DEMAND,              // C????????1????????????????
    E_D07_RULER_TYPE_PHASE_C_COMB_NONE_2_DEMAND,            // C????????2????????????????
    E_D07_RULER_TYPE_PHASE_C_QUAD_1_NONE_DEMAND,              // C???????????????????????????
    E_D07_RULER_TYPE_PHASE_C_QUAD_2_NONE_DEMAND,            // C???????????????????????????
    E_D07_RULER_TYPE_PHASE_C_QUAD_3_NONE_DEMAND,            // C????????????????????????????
    E_D07_RULER_TYPE_PHASE_C_QUAD_4_NONE_DEMAND,            // C????????????????????????????
    E_D07_RULER_TYPE_PHASE_C_FORTH_APPARENT_DEMAND,            // C??????????????????????????
    E_D07_RULER_TYPE_PHASE_C_BACK_APPARENT_DEMAND,            // C????????????????????????
    

    /* ?????A.2??????????????????????????? */
    E_D07_RULER_TYPE_A2_MAX = E_D07_RULER_TYPE_PHASE_C_BACK_APPARENT_DEMAND,    

    /* ?????A.3 ??????????????? */
    E_D07_RULER_TYPE_A3_MIN,
    E_D07_RULER_TYPE_PHASE_A_VOLT = E_D07_RULER_TYPE_A3_MIN,// A????
    E_D07_RULER_TYPE_PHASE_B_VOLT,                            // B????
    E_D07_RULER_TYPE_PHASE_C_VOLT,                            // C????
    E_D07_RULER_TYPE_VOLT_BLOCK,                            // ????????
    
    E_D07_RULER_TYPE_PHASE_A_ELEC,                            // A?????
    E_D07_RULER_TYPE_PHASE_B_ELEC,                            // B?????
    E_D07_RULER_TYPE_PHASE_C_ELEC,                            // C?????
    E_D07_RULER_TYPE_ELEC_BLOCK,                            // ?????????

    E_D07_RULER_TYPE_INSTANT_HAVE_POWER_RATE_TOTAL,            // ????????????    
    E_D07_RULER_TYPE_INSTANT_PHASE_A_HAVE_POWER_RATE,        // ??A??????????
    E_D07_RULER_TYPE_INSTANT_PHASE_B_HAVE_POWER_RATE,        // ??B??????????
    E_D07_RULER_TYPE_INSTANT_PHASE_C_HAVE_POWER_RATE,        // ??C??????????
    E_D07_RULER_TYPE_INSTANT_HAVE_POWER_RATE_BLOCK,            // ???????????????
    
    E_D07_RULER_TYPE_INSTANT_NONE_POWER_RATE_TOTAL,            // ???????????    
    E_D07_RULER_TYPE_INSTANT_PHASE_A_NONE_POWER_RATE,        // ??A?????????
    E_D07_RULER_TYPE_INSTANT_PHASE_B_NONE_POWER_RATE,        // ??B?????????
    E_D07_RULER_TYPE_INSTANT_PHASE_C_NONE_POWER_RATE,        // ??C?????????
    E_D07_RULER_TYPE_INSTANT_NONE_POWER_RATE_BLOCK,            // ??????????????

    E_D07_RULER_TYPE_INSTANT_APPARENT_POWER_RATE_TOTAL,        // ???????????    
    E_D07_RULER_TYPE_INSTANT_PHASE_A_APPARENT_POWER_RATE,    // ??A?????????
    E_D07_RULER_TYPE_INSTANT_PHASE_B_APPARENT_POWER_RATE,    // ??B?????????
    E_D07_RULER_TYPE_INSTANT_PHASE_C_APPARENT_POWER_RATE,    // ??C?????????
    E_D07_RULER_TYPE_INSTANT_APPARENT_POWER_RATE_BLOCK,        // ??????????????

    E_D07_RULER_TYPE_POWER_RATE_FACTOR_TOTAL,                // ?????????
    E_D07_RULER_TYPE_PHASE_A_POWER_RATE_FACTOR,                // A????????
    E_D07_RULER_TYPE_PHASE_B_POWER_RATE_FACTOR,                // B????????
    E_D07_RULER_TYPE_PHASE_C_POWER_RATE_FACTOR,                // C????????
    E_D07_RULER_TYPE_POWER_RATE_FACTOR_BLOCK,                // ?????????????
    
    E_D07_RULER_TYPE_PHASE_A_ANGLE,                            // A?????
    E_D07_RULER_TYPE_PHASE_B_ANGLE,                            // B?????
    E_D07_RULER_TYPE_PHASE_C_ANGLE,                            // C?????
    E_D07_RULER_TYPE_ANGLE_BLOCK,                            // ????????
    
    E_D07_RULER_TYPE_PHASE_A_VOLT_WAVEFORM_DISTORTION,        // A????????????
    E_D07_RULER_TYPE_PHASE_B_VOLT_WAVEFORM_DISTORTION,        // B????????????
    E_D07_RULER_TYPE_PHASE_C_VOLT_WAVEFORM_DISTORTION,        // C????????????
    E_D07_RULER_TYPE_VOLT_WAVEFORM_DISTORTION_BLOCK,        // ????????????????
    
    E_D07_RULER_TYPE_PHASE_A_ELEC_WAVEFORM_DISTORTION,        // A?????????????
    E_D07_RULER_TYPE_PHASE_B_ELEC_WAVEFORM_DISTORTION,        // B?????????????
    E_D07_RULER_TYPE_PHASE_C_ELEC_WAVEFORM_DISTORTION,        // C?????????????
    E_D07_RULER_TYPE_ELEC_WAVEFORM_DISTORTION_BLOCK,        // ?????????????????
    
    E_D07_RULER_TYPE_PHASE_A_VOLT_HARMONIC_CONTENT_T,        // A????(t)??????????
    E_D07_RULER_TYPE_PHASE_A_VOLT_HARMONIC_CONTENT_BLOCK,    // A???????????????????
    
    E_D07_RULER_TYPE_PHASE_B_VOLT_HARMONIC_CONTENT_T,        // B????(t)??????????
    E_D07_RULER_TYPE_PHASE_B_VOLT_HARMONIC_CONTENT_BLOCK,   // B?????????????????
    
    E_D07_RULER_TYPE_PHASE_C_VOLT_HARMONIC_CONTENT_T,        // C????(t)??????????
    E_D07_RULER_TYPE_PHASE_C_VOLT_HARMONIC_CONTENT_BLOCK,   // C?????????????????

    E_D07_RULER_TYPE_PHASE_A_ELEC_HARMONIC_CONTENT_T,        // A?????(t)??????????
    E_D07_RULER_TYPE_PHASE_A_ELEC_HARMONIC_CONTENT_BLOCK,    // A??????????????????
    
    E_D07_RULER_TYPE_PHASE_B_ELEC_HARMONIC_CONTENT_T,        // C?????(t)??????????
    E_D07_RULER_TYPE_PHASE_B_ELEC_HARMONIC_CONTENT_BLOCK,    // C??????????????????
    
    E_D07_RULER_TYPE_PHASE_C_ELEC_HARMONIC_CONTENT_T,        // C?????(t)??????????
    E_D07_RULER_TYPE_PHASE_C_ELEC_HARMONIC_CONTENT_BLOCK,    // C??????????????????
    
    E_D07_RULER_TYPE_ZERO_LINE_ELEC,                        // ???????
    E_D07_RULER_TYPE_POWER_GRID_HZ,                            // ???????
    E_D07_RULER_TYPE_1M_AVER_HAVE_POWER_RATE_TOTAL,            // ??????????????????
    
    E_D07_RULER_TYPE_CURRENT_HAVE_POWER_DEMAND,                // ???????????
    E_D07_RULER_TYPE_CURRENT_NONE_POWER_DEMAND,                // ??????????
    E_D07_RULER_TYPE_CURRENT_APPARENT_POWER_DEMAND,            // ???????????
    
    E_D07_RULER_TYPE_METER_TEMP,                            // ???????
    E_D07_RULER_TYPE_INTER_CLOCK_CELL_VOLT,                    // ???????(???)
    E_D07_RULER_TYPE_READ_METER_CELL_VOLT,                    // ???_??????(??)
    E_D07_RULER_TYPE_INTER_CLOCK_WORK_TIME,                    // ????????????
    
    E_D07_RULER_TYPE_A3_MAX = E_D07_RULER_TYPE_INTER_CLOCK_WORK_TIME,
    
    /* ????? A.4 ????????????????? */
    E_D07_RULER_TYPE_A4_MIN,                                /* ??A.4???????? */
    E_D07_RULER_TYPE_PHASE_ABC_LOSS_VOLT_TIMES = E_D07_RULER_TYPE_A4_MIN,// ABC??????????????????
    E_D07_RULER_TYPE_PHASE_A_LOSS_VOLT_RECORD,                // ??(n)??A???????
    E_D07_RULER_TYPE_PHASE_B_LOSS_VOLT_RECORD,                // ??(n)??B???????
    E_D07_RULER_TYPE_PHASE_C_LOSS_VOLT_RECORD,                // ??(n)??C???????
        
    E_D07_RULER_TYPE_PHASE_ABC_LESS_VOLT_TIMES,                // ABC??????????????????
    E_D07_RULER_TYPE_PHASE_A_LESS_VOLT_RECORD,                // ??(n)??A???????
    E_D07_RULER_TYPE_PHASE_B_LESS_VOLT_RECORD,                // ??(n)??B???????
    E_D07_RULER_TYPE_PHASE_C_LESS_VOLT_RECORD,                // ??(n)??C???????
    
    E_D07_RULER_TYPE_PHASE_ABC_MORE_VOLT_TIMES,                // ABC??????????????????
    E_D07_RULER_TYPE_PHASE_A_MORE_VOLT_RECORD,                // ??(n)??A???????
    E_D07_RULER_TYPE_PHASE_B_MORE_VOLT_RECORD,                // ??(n)??B???????
    E_D07_RULER_TYPE_PHASE_C_MORE_VOLT_RECORD,                // ??(n)??C???????
    
    E_D07_RULER_TYPE_PHASE_ABC_DROP_TIMES,                    // ABC??????????????????
    E_D07_RULER_TYPE_PHASE_A_DROP_RECORD,                    // ??(n)??A???????
    E_D07_RULER_TYPE_PHASE_B_DROP_RECORD,                    // ??(n)??B???????
    E_D07_RULER_TYPE_PHASE_C_DROP_RECORD,                    // ??(n)??C???????
    
    E_D07_RULER_TYPE_LOSS_VOLT_TIMES_TOTAL,                    // ?????????????????
    E_D07_RULER_TYPE_LOSS_ALL_VOLT_TIME_N,                    // ??(n)???????????????????????????
    E_D07_RULER_TYPE_APS_LOSS_ELEC_TIMES_TOTAL,                // ???????????????????????????
    E_D07_RULER_TYPE_APS_LOSS_ELEC_TIME_N,                    // ??(n)??????????????????????????
    
    E_D07_RULER_TYPE_VOLT_ANTI_PHASE_TIMES_TOTAL,            // ????????????????????????
    E_D07_RULER_TYPE_VOLT_ANTI_PHASE_RECORD_N,                // ??(n)?????????????

    E_D07_RULER_TYPE_ELEC_ANTI_PHASE_TIMES_TOTAL,            // ?????????????????????????
    E_D07_RULER_TYPE_ELEC_ANTI_PHASE_RECORD_N,                // ??(n)??????????????
    
    E_D07_RULER_TYPE_VOLT_UNBALANCE_TIMES_TOTAL,            // ???????????????????????
    E_D07_RULER_TYPE_VOLT_UNBALANCE_RECORD_N,                // ??(n)????????????
    
    E_D07_RULER_TYPE_ELEC_UNBALANCE_TIMES_TOTAL,            // ????????????????????????
    E_D07_RULER_TYPE_ELEC_UNBALANCE_RECORD_N,                // ??(n)?????????????
    
    E_D07_RULER_TYPE_PHASE_ABC_LOSS_ELEC_TIMES,                // ABC???????????????????
    E_D07_RULER_TYPE_PHASE_A_LOSS_ELEC_RECORD,                // ??(n)??A????????
    E_D07_RULER_TYPE_PHASE_B_LOSS_ELEC_RECORD,                // ??(n)??B????????
    E_D07_RULER_TYPE_PHASE_C_LOSS_ELEC_RECORD,                // ??(n)??C????????
    
    E_D07_RULER_TYPE_PHASE_ABC_MORE_ELEC_TIMES,                // ABC???????????????????
    E_D07_RULER_TYPE_PHASE_A_MORE_ELEC_RECORD,                // ??(n)??A????????
    E_D07_RULER_TYPE_PHASE_B_MORE_ELEC_RECORD,                // ??(n)??B????????
    E_D07_RULER_TYPE_PHASE_C_MORE_ELEC_RECORD,                // ??(n)??C????????
    
    E_D07_RULER_TYPE_PHASE_ABC_DROP_ELEC_TIMES,                // ABC???????????????????
    E_D07_RULER_TYPE_PHASE_A_DROP_ELEC_RECORD,                // ??(n)??A????????
    E_D07_RULER_TYPE_PHASE_B_DROP_ELEC_RECORD,                // ??(n)??B????????
    E_D07_RULER_TYPE_PHASE_C_DROP_ELEC_RECORD,                // ??(n)??C????????
    
    E_D07_RULER_TYPE_PHASE_ABC_BACKWARD_ELEC_TIMES,            // ABC?????????????????????
    E_D07_RULER_TYPE_PHASE_A_BACKWARD_ELEC_RECORD,            // ??(n)??A??????????
    E_D07_RULER_TYPE_PHASE_B_BACKWARD_ELEC_RECORD,            // ??(n)??B??????????
    E_D07_RULER_TYPE_PHASE_C_BACKWARD_ELEC_RECORD,            // ??(n)??C??????????
    
    E_D07_RULER_TYPE_PHASE_ABC_OVERLOAD_TIMES,                // ABC??????????????????
    E_D07_RULER_TYPE_PHASE_A_OVERLOAD_RECORD,                // ??(n)??A???????
    E_D07_RULER_TYPE_PHASE_B_OVERLOAD_RECORD,                // ??(n)??B???????
    E_D07_RULER_TYPE_PHASE_C_OVERLOAD_RECORD,                // ??(n)??C???????
    
    E_D07_RULER_TYPE_VOLT_PASS_PERCENT_M,                    // ??(n)????????????????
    E_D07_RULER_TYPE_PHASE_A_VOLT_PASS_PERCENT_M,            // ??(n)??A????????????????
    E_D07_RULER_TYPE_PHASE_B_VOLT_PASS_PERCENT_M,            // ??(n)??B????????????????
    E_D07_RULER_TYPE_PHASE_C_VOLT_PASS_PERCENT_M,            // ??(n)??C????????????????
    
    E_D07_RULER_TYPE_POWER_DOWN_TIMES,                        // ????????
    E_D07_RULER_TYPE_POWER_DOWN_TIME_T,                        // ??(t)???????????????????
    
    E_D07_RULER_TYPE_OVER_LIMIT_MEMAND_TIMES,                // ????????????????
    E_D07_RULER_TYPE_FORTH_OVER_LIMIT_MEMAND_TIME_T,        // ??(t)????????????????????    
    E_D07_RULER_TYPE_BACK_OVER_LIMIT_MEMAND_TIME_T,            // ??(t)????????????????????
    
    E_D07_RULER_TYPE_QUAD_1_OVER_LIMIT_MEMAND_TIME_T,        // ??(t)????1?????????????????    
    E_D07_RULER_TYPE_QUAD_2_OVER_LIMIT_MEMAND_TIME_T,        // ??(t)????2?????????????????
    E_D07_RULER_TYPE_QUAD_3_OVER_LIMIT_MEMAND_TIME_T,        // ??(t)????3?????????????????
    E_D07_RULER_TYPE_QUAD_4_OVER_LIMIT_MEMAND_TIME_T,        // ??(t)????4?????????????????
    
    E_D07_RULER_TYPE_METER_PROG_TIMES_TOTAL,                // ????????    
    E_D07_RULER_TYPE_METER_PROG_RECORD_T,                    // ??(t)???????
    
    E_D07_RULER_TYPE_METER_CLEAR_TIMES_TOTAL,                // ????????????    
    E_D07_RULER_TYPE_METER_CLEAR_RECORD_T,                    // ??(t)???????????
    
    E_D07_RULER_TYPE_DEMAND_CLEAR_TIMES_TOTAL,                // ?????????????    
    E_D07_RULER_TYPE_DEMAND_CLEAR_RECORD_T,                    // ??(t)????????????
    
    E_D07_RULER_TYPE_EVENT_CLEAR_TIMES_TOTAL,                // ????????????    
    E_D07_RULER_TYPE_EVENT_CLEAR_RECORD_T,                    // ??(t)???????????
    
    E_D07_RULER_TYPE_ADJUST_TIME_TIMES_TOTAL,                // ????????    
    E_D07_RULER_TYPE_ADJUST_TIME_RECORD_T,                    // ??(t)????????
    
    E_D07_RULER_TYPE_TIME_PART_PROG_TIMES_TOTAL,            // ????????????    
    E_D07_RULER_TYPE_TIME_PART_PROG_RECORD_T,                // ??(t)???????????
    
    E_D07_RULER_TYPE_TIME_ZONE_PROG_TIMES_TOTAL,            // ????????????    
    E_D07_RULER_TYPE_TIME_ZONE_PROG_RECORD_T,                // ??(t)???????????
    
    E_D07_RULER_TYPE_WEEKDAY_PROG_TIMES_TOTAL,                // ?????????????    
    E_D07_RULER_TYPE_WEEKDAY_PROG_RECORD_T,                    // ??(t)????????????
    
    E_D07_RULER_TYPE_HOLIDAY_PROG_TIMES_TOTAL,                // ????????????    
    E_D07_RULER_TYPE_HOLIDAY_PROG_RECORD_T,                    // ??(t)???????????
    
    E_D07_RULER_TYPE_HAVE_COMB_PROG_TIMES_TOTAL,            // ?????????????????    
    E_D07_RULER_TYPE_HAVE_COMB_PROG_RECORD_T,                // ??(t)????????????????
    
    E_D07_RULER_TYPE_NONE_COMB_1_PROG_TIMES_TOTAL,            // ????????1????????    
    E_D07_RULER_TYPE_NONE_COMB_1_PROG_RECORD_T,                // ??(t)??????????1?????
    
    E_D07_RULER_TYPE_NONE_COMB_2_PROG_TIMES_TOTAL,            // ????????2????????    
    E_D07_RULER_TYPE_NONE_COMB_2_PROG_RECORD_T,                // ??(t)??????????2?????
    
    E_D07_RULER_TYPE_PAYOFF_DAY_PROG_TIMES_TOTAL,            // ?????????????    
    E_D07_RULER_TYPE_PAYOFF_DAY_PROG_RECORD_T,                // ??(t)????????????
    
    E_D07_RULER_TYPE_OPEN_METER_CAP_TIMES_TOTAL,            // ??????????    
    E_D07_RULER_TYPE_OPEN_METER_CAP_RECORD_T,                // ??(t)?????????
    
    E_D07_RULER_TYPE_OPEN_BTN_BOX_TIMES_TOTAL,                // ????????????    
    E_D07_RULER_TYPE_OPEN_BTN_BOX_RECORD_T,                    // ??(t)????????????
    
    E_D07_RULER_TYPE_A4_MAX = E_D07_RULER_TYPE_OPEN_BTN_BOX_RECORD_T, /* ?? A.4 ??????? */
    
    /* ????? A.5 ????????????????? */
    E_D07_RULER_TYPE_A5_MIN,                                /* ?? A.5 ???????? */
    E_D07_RULER_TYPE_DATE = E_D07_RULER_TYPE_A5_MIN,        // ??????????????0??????????
    E_D07_RULER_TYPE_TIME,                                    // ???
    E_D07_RULER_TYPE_DEMAND_PERIOD,                            // ???????????
    E_D07_RULER_TYPE_SLIT_TIME,                                // ???????
    E_D07_RULER_TYPE_ADJUST_PULSE_WEDTH,                    // ??????????
    E_D07_RULER_TYPE_SWITCH_ZONE_TIME,                        // ????????????????
    E_D07_RULER_TYPE_SWITCH_PART_TIME,                        // ??????????????????
    E_D07_RULER_TYPE_YEAR_ZONE_P,                            // ??????? p <= 14
    E_D07_RULER_TYPE_DAY_PART_Q,                            // ????????? q <= 8
    E_D07_RULER_TYPE_DAY_PART_M,                            // ???????(?????????)m <=14
    E_D07_RULER_TYPE_RATE_K,                                // ?????? k <= 63
    E_D07_RULER_TYPE_HOLIDAY_N,                                // ??????????n <= 254
    E_D07_RULER_TYPE_HARMONIC_ANALY_TIMES,                    // ????????????
    E_D07_RULER_TYPE_AUTO_DISPLAY_SCREENS,                    // ?????????????
    E_D07_RULER_TYPE_DISPLAY_TIME,                            // ?????????
    E_D07_RULER_TYPE_DISPLAY_POWER_DECIMAL_DIGITS,            // ???????????????
    E_D07_RULER_TYPE_DISPLAY_DEMAND_DECIMAL_DIGITS,            // ??????????????????
    E_D07_RULER_TYPE_PRESS_DISPLAY_SCREENS,                    // ??????????????
    E_D07_RULER_TYPE_ADDRESS,                                // ?????
    E_D07_RULER_TYPE_METER_ID,                                // ???
    E_D07_RULER_TYPE_ASSETS_CODE,                            // ??????????
    E_D07_RULER_TYPE_RATED_VOLT,                            // ?????
    E_D07_RULER_TYPE_RATED_ELEC,                            // ??????
    E_D07_RULER_TYPE_MAX_ELEC,                                // ??????

    E_D07_RULER_TYPE_HAVE_ACCURACY_CLASS,                    // ??????????
    E_D07_RULER_TYPE_NONE_ACCURACY_CLASS,                    // ?????????
        
    E_D07_RULER_TYPE_METER_HAVE_CONSTANT,                    // ???????????
    E_D07_RULER_TYPE_METER_NONE_CONSTANT,                    // ??????????
    
    E_D07_RULER_TYPE_METER_MODEL_NUM,                        // ??????
    E_D07_RULER_TYPE_METER_PROD_DATE,                        // ????????
    E_D07_RULER_TYPE_METER_RULER_VERSION,                    // ????????
    
    E_D07_RULER_TYPE_METER_RUN_STWD_1,                        // ??????????? 1
    E_D07_RULER_TYPE_METER_RUN_STWD_2,                        // ??????????? 2
    E_D07_RULER_TYPE_METER_RUN_STWD_3,                        // ??????????? 3
    E_D07_RULER_TYPE_METER_RUN_STWD_4,                        // ??????????? 4
    E_D07_RULER_TYPE_METER_RUN_STWD_5,                        // ??????????? 5
    E_D07_RULER_TYPE_METER_RUN_STWD_6,                        // ??????????? 6
    E_D07_RULER_TYPE_METER_RUN_STWD_7,                        // ??????????? 7
    E_D07_RULER_TYPE_METER_RUN_STWD_BLOCK,                    // ????????????????
    E_D07_RULER_TYPE_HAVE_COMB_STWD,                        // ???????????????
    E_D07_RULER_TYPE_NONE_COMB_1_STWD,                        // ????????1??????
    E_D07_RULER_TYPE_NONE_COMB_2_STWD,                        // ????????2??????
    
    E_D07_RULER_TYPE_MODEM_IRDA_RATE_STWD,                    // ????????????????????????
    E_D07_RULER_TYPE_TOUCH_IRDA_RATE_STWD,                    // ???????????????????????
    E_D07_RULER_TYPE_PART_1_RATE_STWD,                        // ???? 1 ?????????????    
    E_D07_RULER_TYPE_PART_2_RATE_STWD,                        // ???? 2 ?????????????    
    E_D07_RULER_TYPE_PART_3_RATE_STWD,                        // ???? 3 ?????????????    
    
    E_D07_RULER_TYPE_WEEKDAY_STWD,                            // ????????????
    E_D07_RULER_TYPE_WEEKDAY_TBL,                            // ??????????????????
    E_D07_RULER_TYPE_OVERLOAD_MODEL_STWD,                    // ??????????
    E_D07_RULER_TYPE_FREEZE_MODEL_STWD,                        // ????????????
    E_D07_RULER_TYPE_OVERLOAD_START_TIME,                    // ????????????
    E_D07_RULER_TYPE_OVERLOAD_INTRV_TIME_1,                    // ?? 1 ????????????
    E_D07_RULER_TYPE_OVERLOAD_INTRV_TIME_2,                    // ?? 2 ????????????
    E_D07_RULER_TYPE_OVERLOAD_INTRV_TIME_3,                    // ?? 3 ????????????
    E_D07_RULER_TYPE_OVERLOAD_INTRV_TIME_4,                    // ?? 4 ????????????
    E_D07_RULER_TYPE_OVERLOAD_INTRV_TIME_5,                    // ?? 5 ????????????
    E_D07_RULER_TYPE_OVERLOAD_INTRV_TIME_6,                    // ?? 6 ????????????
    E_D07_RULER_TYPE_PAYOFF_DAY_1,                            // ???? 1 ??????
    E_D07_RULER_TYPE_PAYOFF_DAY_2,                            // ???? 2 ??????
    E_D07_RULER_TYPE_PAYOFF_DAY_3,                            // ???? 3 ??????
    
    E_D07_RULER_TYPE_PASSWORD_LV0,                            // 0 ??????
    E_D07_RULER_TYPE_PASSWORD_LV1,                            // 1 ??????
    E_D07_RULER_TYPE_PASSWORD_LV2,                            // 2 ??????
    E_D07_RULER_TYPE_PASSWORD_LV3,                            // 3 ??????
    E_D07_RULER_TYPE_PASSWORD_LV4,                            // 4 ??????
    E_D07_RULER_TYPE_PASSWORD_LV5,                            // 5 ??????
    E_D07_RULER_TYPE_PASSWORD_LV6,                            // 6 ??????
    E_D07_RULER_TYPE_PASSWORD_LV7,                            // 7 ??????
    E_D07_RULER_TYPE_PASSWORD_LV8,                            // 8 ??????
    E_D07_RULER_TYPE_PASSWORD_LV9,                            // 9 ??????
    
    E_D07_RULER_TYPE_PHASE_A_CONDUCT_FACTOR,                // A???????
    E_D07_RULER_TYPE_PHASE_A_SUSCEPT_FACTOR,                // A????????
    E_D07_RULER_TYPE_PHASE_A_RESIST_FACTOR,                    // A????????
    E_D07_RULER_TYPE_PHASE_A_REACTANCE_FACTOR,                // A???N???
    
    E_D07_RULER_TYPE_PHASE_B_CONDUCT_FACTOR,                // B???????
    E_D07_RULER_TYPE_PHASE_B_SUSCEPT_FACTOR,                // B????????
    E_D07_RULER_TYPE_PHASE_B_RESIST_FACTOR,                    // B????????
    E_D07_RULER_TYPE_PHASE_B_REACTANCE_FACTOR,                // B???N???
    
    E_D07_RULER_TYPE_PHASE_C_CONDUCT_FACTOR,                // C???????
    E_D07_RULER_TYPE_PHASE_C_SUSCEPT_FACTOR,                // C????????
    E_D07_RULER_TYPE_PHASE_C_RESIST_FACTOR,                    // C????????
    E_D07_RULER_TYPE_PHASE_C_REACTANCE_FACTOR,                // C???N???
    
    E_D07_RULER_TYPE_FORTH_HAVE_POWER_MAX,                    // ?????????????????
    E_D07_RULER_TYPE_BACK_HAVE_POWER_MAX,                    // ?????????????????
    
    E_D07_RULER_TYPE_VOLT_MAX,                                // ????????
    E_D07_RULER_TYPE_VOLT_MIN,                                // ????????
    
    E_D07_RULER_TYPE_DAY_PART_DATA_1,                        // ??????????????    
    E_D07_RULER_TYPE_DAY_PART_DATA_1_T,                        // ??????(t)??????????? t(1~8)
    E_D07_RULER_TYPE_DAY_PART_DATA_2,                        // ??????????????    
    E_D07_RULER_TYPE_DAY_PART_DATA_2_T,                        // ??????(t)??????????? t(1~8)
    
    E_D07_RULER_TYPE_HOLIDAY_DATE_T,                        // ?? (t)????????????????????? t(1~254)

    E_D07_RULER_TYPE_AUTO_DISPLAY_SCREEN_T,                    // ???????????(t)??????????? t(1~254)
    E_D07_RULER_TYPE_PREES_DISPLAY_SCREEN_T,                // ????????????(t)??????????? t(1~254)
    E_D07_RULER_TYPE_FACTORY_SOFTWARE_VERSION,                // ????????????
    E_D07_RULER_TYPE_FACTORY_HARDWARE_VERSION,                // ????????????
    E_D07_RULER_TYPE_FACTORY_SERIAL_NUM,                    // ??????
    E_D07_RULER_TYPE_A5_MAX = E_D07_RULER_TYPE_FACTORY_SERIAL_NUM,/* ?? A.5 ??????? */
    
    /* ????? A.6 ??????????????? */
    /* t(1~12)*/
    E_D07_RULER_TYPE_A6_MIN,                                /* ?? A.6 ???????? */    
    E_D07_RULER_TYPE_FIX_FREZ_TIME_T = E_D07_RULER_TYPE_A6_MIN,    // ??(t)????????????
    E_D07_RULER_TYPE_FIX_FREZ_FORTH_HAVE_POWER_T,            // ??(t)?????????????????????????
    E_D07_RULER_TYPE_FIX_FREZ_BACK_HAVE_POWER_T,            // ??(t)???????????????????????
    E_D07_RULER_TYPE_FIX_FREZ_COMB_1_NONE_POWER_T,            // ??(t)???????????????1????????
    E_D07_RULER_TYPE_FIX_FREZ_COMB_2_NONE_POWER_T,            // ??(t)???????????????2????????
    E_D07_RULER_TYPE_FIX_FREZ_PHASE_1_NONE_POWER_T,            // ??(t)??????????????????????????
    E_D07_RULER_TYPE_FIX_FREZ_PHASE_2_NONE_POWER_T,            // ??(t)??????????????????????????
    E_D07_RULER_TYPE_FIX_FREZ_PHASE_3_NONE_POWER_T,            // ??(t)???????????????????????????
    E_D07_RULER_TYPE_FIX_FREZ_PHASE_4_NONE_POWER_T,            // ??(t)???????????????????????????
    E_D07_RULER_TYPE_FIX_FREZ_FORTH_HAVE_DEMAND_T,            // ??(t)????????????????????????????????????????
    E_D07_RULER_TYPE_FIX_FREZ_BACK_HAVE_DEMAND_T,            // ??(t)??????????????????????????????????????
    E_D07_RULER_TYPE_FIX_FREZ_VAR_T,                        // ??(t)????????????????
    E_D07_RULER_TYPE_FIX_FREZ_BLOCK_T,                        // ??(t)??????????????
    
    /* t (1~3)*/
    E_D07_RULER_TYPE_INST_FREZ_TIME_T,                        // ??(t)???????????
    E_D07_RULER_TYPE_INST_FREZ_FORTH_HAVE_POWER_T,            // ??(t)????????????????????????
    E_D07_RULER_TYPE_INST_FREZ_BACK_HAVE_POWER_T,            // ??(t)??????????????????????
    E_D07_RULER_TYPE_INST_FREZ_COMB_1_NONE_POWER_T,            // ??(t)??????????????????????
    E_D07_RULER_TYPE_INST_FREZ_COMB_2_NONE_POWER_T,            // ??(t)??????????????????????
    E_D07_RULER_TYPE_INST_FREZ_PHASE_1_NONE_POWER_T,        // ??(t)?????????????????????????
    E_D07_RULER_TYPE_INST_FREZ_PHASE_2_NONE_POWER_T,        // ??(t)?????????????????????????
    E_D07_RULER_TYPE_INST_FREZ_PHASE_3_NONE_POWER_T,        // ??(t)??????????????????????????
    E_D07_RULER_TYPE_INST_FREZ_PHASE_4_NONE_POWER_T,        // ??(t)??????????????????????????
    E_D07_RULER_TYPE_INST_FREZ_FORTH_HAVE_DEMAND_T,            // ??(t)???????????????????????????????????????
    E_D07_RULER_TYPE_INST_FREZ_BACK_HAVE_DEMAND_T,            // ??(t)?????????????????????????????????????
    E_D07_RULER_TYPE_INST_FREZ_BLOCK_T,                        // ??(t)?????????????

    /* t (1~2) */
    E_D07_RULER_TYPE_SWITCH_ZONE_TIME_T,                    // ??(t)?? ????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_FORTH_HAVE_POWER_T,        // ??(t)?? ?????????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_BACK_HAVE_POWER_T,            // ??(t)?? ?????????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_COMB_1_NONE_POWER_T,        // ??(t)?? ???????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_COMB_2_NONE_POWER_T,        // ??(t)?? ???????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_QUAD_1_NONE_POWER_T,        // ??(t)?? ???????????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_QUAD_2_NONE_POWER_T,        // ??(t)?? ???????????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_QUAD_3_NONE_POWER_T,        // ??(t)?? ????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_QUAD_4_NONE_POWER_T,        // ??(t)?? ????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_FORTH_HAVE_DEMAND_T,        // ??(t)?? ?????????????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_BACK_HAVE_DEMAND_T,           // ??(t)?? ?????????????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_VAR_DATA_T,                   // ??(t)?? ?????????????????????
    E_D07_RULER_TYPE_SWITCH_ZONE_BLOCK_T,                       // ??(t)?? ??????????????????
    
    /* t (1~2) */
    E_D07_RULER_TYPE_SWITCH_PART_TIME_T,                    // ??(t)?? ??????????????????
    E_D07_RULER_TYPE_SWITCH_PART_FORTH_HAVE_POWER_T,        // ??(t)?? ???????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_BACK_HAVE_POWER_T,            // ??(t)?? ???????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_COMB_1_NONE_POWER_T,        // ??(t)?? ?????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_COMB_2_NONE_POWER_T,        // ??(t)?? ?????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_QUAD_1_NONE_POWER_T,        // ??(t)?? ?????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_QUAD_2_NONE_POWER_T,        // ??(t)?? ?????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_QUAD_3_NONE_POWER_T,        // ??(t)?? ??????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_QUAD_4_NONE_POWER_T,        // ??(t)?? ??????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_FORTH_HAVE_DEMAND_T,        // ??(t)?? ???????????????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_BACK_HAVE_DEMAND_T,           // ??(t)?? ???????????????????????????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_VAR_DATA_T,                   // ??(t)?? ???????????????????????
    E_D07_RULER_TYPE_SWITCH_PART_BLOCK_T,                       // ??(t)?? ????????????????????

    E_D07_RULER_TYPE_A6_MAX = E_D07_RULER_TYPE_SWITCH_PART_BLOCK_T,    /* ?? A.6 ??????? */    
    
    /* ????? A.7 ?????????????? */
    E_D07_RULER_TYPE_A7_MIN,                                /* ?? A.7 ???????? */    
    E_D07_RULER_TYPE_EARLY_OVERLOAD_RECORD = E_D07_RULER_TYPE_A7_MIN,    // ????????
    E_D07_RULER_TYPE_GIVEN_OVERLOAD_RECORD,                    // ???????????
    E_D07_RULER_TYPE_RECNT_OVERLOAD_RECORD,                    // ???????????
    
    E_D07_RULER_TYPE_EARLY_OVERLOAD_RECORD_1,                // ??????? ????????
    E_D07_RULER_TYPE_GIVEN_OVERLOAD_RECORD_1,                // ??????? ???????????
    E_D07_RULER_TYPE_RECNT_OVERLOAD_RECORD_1,                // ??????? ???????????

    E_D07_RULER_TYPE_EARLY_OVERLOAD_RECORD_2,                // ??????? ????????
    E_D07_RULER_TYPE_GIVEN_OVERLOAD_RECORD_2,                // ??????? ???????????
    E_D07_RULER_TYPE_RECNT_OVERLOAD_RECORD_2,                // ??????? ???????????

    E_D07_RULER_TYPE_EARLY_OVERLOAD_RECORD_3,                // ???????? ????????
    E_D07_RULER_TYPE_GIVEN_OVERLOAD_RECORD_3,                // ???????? ???????????
    E_D07_RULER_TYPE_RECNT_OVERLOAD_RECORD_3,                // ???????? ???????????

    E_D07_RULER_TYPE_EARLY_OVERLOAD_RECORD_4,                // ???????? ????????
    E_D07_RULER_TYPE_GIVEN_OVERLOAD_RECORD_4,                // ???????? ???????????
    E_D07_RULER_TYPE_RECNT_OVERLOAD_RECORD_4,                // ???????? ???????????

    E_D07_RULER_TYPE_EARLY_OVERLOAD_RECORD_5,                // ???????? ????????
    E_D07_RULER_TYPE_GIVEN_OVERLOAD_RECORD_5,                // ???????? ???????????
    E_D07_RULER_TYPE_RECNT_OVERLOAD_RECORD_5,                // ???????? ???????????

    E_D07_RULER_TYPE_EARLY_OVERLOAD_RECORD_6,                // ???????? ????????
    E_D07_RULER_TYPE_GIVEN_OVERLOAD_RECORD_6,                // ???????? ???????????
    E_D07_RULER_TYPE_RECNT_OVERLOAD_RECORD_6,                // ???????? ???????????
    E_D07_RULER_TYPE_A7_MAX = E_D07_RULER_TYPE_RECNT_OVERLOAD_RECORD_6,    /* ?? A.7 ??????? */
    

    /* ?????? */
    





}E_D07_RULER_TYPE;
/** dlt645 2007??????? */




/* DLT645 2007?? ???????????? */
typedef enum
{
    E_DLT64507_RULER_TABEL_POWER,          /* ?????A.1 ????????????????? */
    E_DLT64507_RULER_TABEL_DEMAND,      /* ?????A.2 ??????????????????????????? */
    E_DLT64507_RULER_TABEL_VAR,            /* ?????A.3 ??????????????? */
    E_DLT64507_RULER_TABEL_EVENT,        /* ?????A.4 ????????????????? */
    E_DLT64507_RULER_TABEL_PARA,         /* ?????A.5 ????????????????? */
    E_DLT64507_RULER_TABEL_FREEZE,      /* ?????A.6 ??????????????? */
    E_DLT64507_RULER_TABEL_LOAD,        /* ?????A.7 ????????????????? */
    E_DLT64507_RULER_TABEL_EXT,            /* ?????A.8 ??????????????????? */

}E_DLT645_07_RULER_TABEL_TYPE;



/* ?????????? */
typedef enum
{
    E_D07_PAYOFF_NULL,      // ???????????
    E_D07_PAYOFF_CURRENT, /* ??? */
    E_D07_PAYOFF_PRE_1,      /* ?? 1 ?????? */
    E_D07_PAYOFF_PRE_2,      /* ?? 2 ?????? */
    E_D07_PAYOFF_PRE_3,      /* ?? 3 ?????? */
    E_D07_PAYOFF_PRE_4,      /* ?? 4 ?????? */
    E_D07_PAYOFF_PRE_5,      /* ?? 5 ?????? */
    E_D07_PAYOFF_PRE_6,      /* ?? 6 ?????? */
    E_D07_PAYOFF_PRE_7,      /* ?? 7 ?????? */
    E_D07_PAYOFF_PRE_8,      /* ?? 8 ?????? */
    E_D07_PAYOFF_PRE_9,      /* ?? 9 ?????? */
    E_D07_PAYOFF_PRE_10,  /* ?? 10 ?????? */
    E_D07_PAYOFF_PRE_11,  /* ?? 11 ?????? */
    E_D07_PAYOFF_PRE_12,  /* ?? 12 ?????? */
     
}E_D07_PARA_PAYOFF;


/* ???? ???????? */
typedef enum
{

    E_D07_HARM_NULL,        // ??????????????
    E_D07_HARM_1,            // 1??????
    E_D07_HARM_2,            // 2??????
    E_D07_HARM_3,            // 3??????
    E_D07_HARM_4,            // 4??????
    E_D07_HARM_5,            // 5??????
    E_D07_HARM_6,            // 6??????
    E_D07_HARM_7,            // 7??????
    E_D07_HARM_8,            // 8??????
    E_D07_HARM_9,            // 9??????
    E_D07_HARM_10,            // 10??????
    E_D07_HARM_11,            // 11??????
    E_D07_HARM_12,            // 12??????
    E_D07_HARM_13,            // 13??????
    E_D07_HARM_14,            // 14??????
    E_D07_HARM_15,            // 15??????
    E_D07_HARM_16,            // 16??????
    E_D07_HARM_17,            // 17??????
    E_D07_HARM_18,            // 18??????
    E_D07_HARM_19,            // 19??????
    E_D07_HARM_20,            // 20??????
    E_D07_HARM_21,            // 21??????

}E_D07_PARA_HARM;

/* ??????N???? */
typedef enum
{
    E_D07_LAST_NULL,        // ????????
    E_D07_LAST_1,            // ??1??
    E_D07_LAST_2,            // ??2??
    E_D07_LAST_3,            // ??3??
    E_D07_LAST_4,            // ??4??
    E_D07_LAST_5,            // ??5??
    E_D07_LAST_6,            // ??6??
    E_D07_LAST_7,            // ??7??
    E_D07_LAST_8,            // ??8??
    E_D07_LAST_9,            // ??9??
    E_D07_LAST_10,            // ??10??    
    E_D07_LAST_11,            // ??11??
    E_D07_LAST_12,            // ??12??    
}E_D07_PARA_LAST;

/* ??????????? */
typedef enum
{
    E_D07_RATE_NULL,        // ????????????
    E_D07_RATE_1,            // ????
    E_D07_RATE_2,            // ????2
    E_D07_RATE_3,            // ????3
    E_D07_RATE_4,            // ????4
    E_D07_RATE_5,            // ????5
    E_D07_RATE_6,            // ????6
    E_D07_RATE_7,            // ????7
    E_D07_RATE_8,            // ????8
    E_D07_RATE_9,            // ????9
    E_D07_RATE_10,            // ????10
    E_D07_RATE_11,            // ????11
    E_D07_RATE_12,            // ????12
    E_D07_RATE_13,            // ????13
    E_D07_RATE_14,            // ????14
    E_D07_RATE_15,            // ????15
    E_D07_RATE_16,            // ????16
    E_D07_RATE_17,            // ????17
    E_D07_RATE_18,            // ????18
    E_D07_RATE_19,            // ????19
    E_D07_RATE_20,            // ????20
    E_D07_RATE_21,            // ????21
    E_D07_RATE_22,            // ????22
    E_D07_RATE_23,            // ????23
    E_D07_RATE_24,            // ????24
    E_D07_RATE_25,            // ????25
    E_D07_RATE_26,            // ????26
    E_D07_RATE_27,            // ????27
    E_D07_RATE_28,            // ????28
    E_D07_RATE_29,            // ????29
    E_D07_RATE_30,            // ????30
    E_D07_RATE_31,            // ????31
    E_D07_RATE_32,            // ????32
    E_D07_RATE_33,            // ????33
    E_D07_RATE_34,            // ????34
    E_D07_RATE_35,            // ????35
    E_D07_RATE_36,            // ????36
    E_D07_RATE_37,            // ????37
    E_D07_RATE_38,            // ????38
    E_D07_RATE_39,            // ????39
    E_D07_RATE_40,            // ????40
    E_D07_RATE_41,            // ????41
    E_D07_RATE_42,            // ????42
    E_D07_RATE_43,            // ????43
    E_D07_RATE_44,            // ????44
    E_D07_RATE_45,            // ????45
    E_D07_RATE_46,            // ????46
    E_D07_RATE_47,            // ????47
    E_D07_RATE_48,            // ????48
    E_D07_RATE_49,            // ????49
    E_D07_RATE_50,            // ????50
    E_D07_RATE_51,            // ????51
    E_D07_RATE_52,            // ????52
    E_D07_RATE_53,            // ????53
    E_D07_RATE_54,            // ????54
    E_D07_RATE_55,            // ????55
    E_D07_RATE_56,            // ????56
    E_D07_RATE_57,            // ????57
    E_D07_RATE_58,            // ????58
    E_D07_RATE_59,            // ????59
    E_D07_RATE_60,            // ????60
    E_D07_RATE_61,            // ????61
    E_D07_RATE_62,            // ????62
    E_D07_RATE_63,            // ????63
    E_D07_RATE_64,            // ????64
}E_D07_PARA_RATE;


/* ?? */












/* ??????????? */
typedef enum
{
    E_D07_TRANS_U2F,    // ?????????????????????
    E_D07_TRANS_F2U,    // ?????????????????????
    
}E_D07_TRANS_FLG;

typedef eD07Err (*F_D07_RULER_TRANS)(E_D07_TRANS_FLG, char*, char*);

/* ??????????? */
typedef enum
{    
    E_D07_FMT_UNKOWN,                // ??? 
    E_D07_FMT_XXXX,                    // XXXX
    E_D07_FMT_XX_2 = E_D07_FMT_XXXX,// XXXX
    E_D07_FMT_XXXXXX,                // XXXXXX
    E_D07_FMT_XX_3 = E_D07_FMT_XXXXXX,
    E_D07_FMT_XX_4,                    // XX ???4??
    E_D07_FMT_XX_6,                    // XX ???6??
    E_D07_FMT_XX_8,                    // XX ???8??
    E_D07_FMT_XX_10,                // XX ???10??
    E_D07_FMT_XX_16,                // XX ???16??
    E_D07_FMT_X_XXX,                // X.XXX
    E_D07_FMT_XX_XX,                // XX.XX
    E_D07_FMT_XX_XXXX,                // XX.XXXX
    E_D07_FMT_XX_XXXX_8,            // XX.XXXX
    E_D07_FMT_XXX_X,                // XXX.X
    E_D07_FMT_XXX_XXX,                // XXX.XXX
    E_D07_FMT_XXXXXX_XX,            // XXXXXX.XX
    E_D07_FMT_XXXXXXXX,                // XXXXXXXX
    E_D07_FMT_XXXXXX_2,                // XXXXXX ???2??
    E_D07_FMT_XXXXXX_6,                // XXXXXX ???6??
    E_D07_FMT_NN,                     // NN 
    E_D07_FMT_NNNN,                 // NNNN 
    E_D07_FMT_NN_4,                 // NN 
    E_D07_FMT_NN_6,                 // NN 
    E_D07_FMT_NN_32,                 // NN 
    E_D07_FMT_N_NNN,                 // N.NNN 
    E_D07_FMT_NN_NNNN,                 // NN.NNNN 
    E_D07_FMT_NNN_N,                 // NNN.N 
    E_D07_FMT_hhmmss,                // hhmmss 
    E_D07_FMT_MMDDhhmm,                // MMDDhhmm
    E_D07_FMT_MMDDNN_14,            // MMDDNN ???14??
    E_D07_FMT_hhmmNN_14,            // hhmmNN ???14??
    E_D07_FMT_DDhh,                    // DDhh
    E_D07_FMT_YYMMDDWW,                // YYMMDDWW 
    E_D07_FMT_YYMMDDNN,                // YYMMDDWW 
    E_D07_FMT_YYMMDDhhmm,            // YYMMDDhhmm 
    E_D07_FMT_YYMMDDhhmmNN,            // YYMMDDhhmm
    E_D07_FMT_YYMMDDhhmmss,            // YYMMDDhhmmss 
    E_D07_FMT_YYMMDDhhmmss_2,        // YYMMDDhhmmss YYMMDDhhmmss
    E_D07_FMT_YYMMDDhhmmss_2_XX_XXXX_YYMMDDhhmm,        // YYMMDDhhmmss YYMMDDhhmmss xx.xxxx YYMMDDhhmm
    E_D07_FMT_XX_XXXX_YYMMDDhhmm,    /* XX.XXXX
                                       YYMMDDhhmm */
    E_D07_FMT_YYMMDDhhmmss_XXX_XXX_YYMMDDhhmmss,    /* YYMMDDhhmmss
                                                        XXX.XXXX
                                                        YYMMDDhhmmss */

    // ????????????????
    E_D07_FMT_RECD_LOSS_LESS_VOLT,        // ?? ????????    
    E_D07_FMT_RECD_ANTI_PHASE,    // ????????????
    E_D07_FMT_RECD_UN_BALANCE,    // ???????????    
    E_D07_FMT_RECD_LESS_MORE_LOSS_ELEC,        // LESS MORE LOSS ????????????????????????
    E_D07_FMT_RECD_VOLT_PASS_PERCENT,        // ???????????????
    E_D07_FMT_RECD_METER_PROG,        // ???????????????
    E_D07_FMT_RECD_METER_CLEAR,        // ???????????????
    E_D07_FMT_RECD_DEAMD_CLEAR,        // ???????????????
    E_D07_FMT_RECD_EVENT_CLEAR,        // ???????????????
    E_D07_FMT_RECD_ADJUST_TIME,        // ???????????????
    E_D07_FMT_RECD_PART_PROG,        // ?????????
    E_D07_FMT_RECD_ZONE_PROG,        // ?????????
    E_D07_FMT_RECD_WEEKDAY_PROG,
    E_D07_FMT_RECD_HOLIDAY_PROG,
    E_D07_FMT_RECD_POWER_PROG,
    E_D07_FMT_RECD_PAYOFF_PROG,
    E_D07_FMT_RECD_OPEN_METER_CAP,
    E_D07_FMT_RECD_OPEN_BTN_BOX,
}E_D07_RULER_FORMAT;

/* ??????????? */
typedef enum
{
    E_D07_RDWR_READ_ONLY,        /* ??? */
    E_D07_RDWR_WRITE_ONLY,        /* ??? */
    E_D07_RDWR_READ_WRITE,        /* ???? */

}E_D07_RULER_RDWR;


/*?????*/


typedef struct
{
    E_D07_PARA_PAYOFF   payoff;        // ??????(??????????????(1-12)??????)
    E_D07_PARA_RATE      rate;         // ????(???????1~63)
    E_D07_PARA_HARM      harm;         // ??????(???????1~21)
    E_D07_PARA_LAST      last;         // ??(n)?????(???????1-10)
    
}S_D07_RULER_PARA;
typedef struct
{
    E_D07_RULER_TYPE     type;            // ???????
    E_D07_RULER_RDWR    rdwr;            // ???????????????
    E_D07_RULER_FORMAT     format;            // ??????????
    F_D07_RULER_TRANS    func;            // ????????????????
    S_D07_RULER_PARA     para;            // ???????????????
    int                 len;            // ???????????? 
    char         name[NAME_LEN];        // ?????????????????

}S_D07_RULER_INFO;



typedef struct
{
    UINT32 ruler_id;     /* ???????? C0 C1  ???? 0x40E3 */
    UINT8  ctrl_code;    /* ?????? */
    UINT8  data_len;     /* ??????????? ????????????????? */
    char   address[13];  /* ??? */
    char* data;          /* ???? */

}S_D07_PACK_FRAME;

/* ???????? C ???????? */
typedef enum
{
    E_D07_CTRL_DIR_M2S, // ????????
    E_D07_CTRL_DIR_S2M, // ????????
    
}E_D07_CTRL_DIR;

/* ???????? */
typedef enum
{
    E_D07_CTRL_SR_OK, // ??????????
    E_D07_CTRL_SR_NO, // ????????
    
}E_D07_CTRL_SR;

/* ??????????? */
typedef enum
{
    E_D07_CTRL_FLW_NONE, //?????
    E_D07_CTRL_FLW_HAVE, //??????
    
}E_D07_CTRL_FLW;
/*  ?????????????????? */
typedef enum
{
    E_D07_UNPD_FLG_OK,          /* ??????? ??????? ??????????????? */
    E_D07_UNPD_FLG_ERROR_OK,    /* ??????? ??????? ????????????? */
    E_D07_UNPD_FLG_NONE_DATA,   /* ??????????? ???? */
    E_D07_UNPD_FLG_FUNC_NULL,   /* ??????????? */
    E_D07_UNPD_FLG_FUNC_ERROR,  /* ????????????????????????? */
    E_D07_UNPD_FLG_NONE_STRUCT, /* ???????????????????????? */

}E_D07_UNPD_FLG;

/* ??????C ?????? */
typedef enum
{
    E_D07_CTRL_RESV                  = 0x00,// ????
    E_D07_CTRL_SYNC_TIME          = 0x08,// ?????
    E_D07_CTRL_READ_DATA          = 0x11,// ??????
    E_D07_CTRL_READ_AFTERDATA      = 0x12,// ??????????
    E_D07_CTRL_READ_ADDR          = 0x13,// ???????
    E_D07_CTRL_WRITE_DATA          = 0x14,// ??????
    E_D07_CTRL_WRITE_ADDR          = 0x15,// ???????
    E_D07_CTRL_FREEZ_COMM          = 0x16,// ????????
    E_D07_CTRL_MODIFY_BAUD          = 0x17,// ??????????
    E_D07_CTRL_MODIFY_PASSWORD      = 0x18,// ???????
    E_D07_CTRL_CLEAR_MAXDEMAND      = 0x19,// ???????????
    E_D07_CTRL_CLEAR_METER          = 0x1A,// ???????
    E_D07_CTRL_CLEAR_EVENT          = 0x1B,// ???????
    E_D07_CTRL_COMM                  = 0x1C // ????????
    
}E_D07_CTRL_FNC;
/* ??????C ?????? */
typedef struct
{
    E_D07_CTRL_DIR direct;    // ???????? 
    E_D07_CTRL_SR  reply;      // ???????????
    E_D07_CTRL_FLW follow;      // ????????
    E_D07_CTRL_FNC funcode;      // ??????
    
}S_D07_CTRL_CODE;



typedef struct
{
    float fXX_XXXX;
    UINT8 YY;
    UINT8 MM;
    UINT8 DD;
    UINT8 hh;
    UINT8 mm;
        
}S_D07_XX_XXXX_YYMMDDhhmm;


typedef struct
{
    UINT32 a_times;
    UINT32 a_seconds;
    UINT32 b_times;
    UINT32 b_seconds;
    UINT32 c_times;
    UINT32 c_seconds;
}S_D07_XXXXXX_6;

typedef struct
{
    UINT8 MM;    // month
    UINT8 DD;    // day
    UINT8 hh;    // hour
    UINT8 mm;    // minute
}S_D07_MMDDhhmm;


typedef struct
{

    UINT32 ulTimes;   // XXXXXX
    UINT32 ulMinutes; // XXXXXX
}S_D07_XXXXXX_2;


typedef struct
{

    float fXX_XXXXX[8];
}S_D07_XX_XXXX_8;

typedef struct
{
    UINT8 hh;
    UINT8 mm;
    UINT8 ss;    
}S_D07_hhmmss;

typedef struct
{

    UINT8 hh;
    UINT8 mm;
    UINT8 NN;

}S_D07_hhmmNN;

typedef struct
{
    S_D07_hhmmNN hhmmNN[14];
}S_D07_hhmmNN_14;




typedef struct
{

    UINT8 YY;   // year
    UINT8 MM;    // month
    UINT8 DD;    // day
    UINT8 hh;    // hour
    UINT8 mm;    // minute
    UINT8 ss;    // second

}S_D07_YYMMDDhhmmss;

typedef struct
{

    S_D07_YYMMDDhhmmss sBegin;
    S_D07_YYMMDDhhmmss sEnd;
}S_D07_YYMMDDhhmmss_2;

typedef struct
{

    UINT8 YY;   // year
    UINT8 MM;    // month
    UINT8 DD;    // day
    UINT8 hh;    // hour
    UINT8 mm;    // minute

}S_D07_YYMMDDhhmm;

typedef struct
{
    S_D07_YYMMDDhhmmss            sBgnTime;      // ??????         6 * 1
    S_D07_YYMMDDhhmmss            sEndTime;      // ???????         6 * 1 
    S_D07_XX_XXXX_YYMMDDhhmm   sDemand;        // ???????????????? 
}S_D07_YYMMDDhhmmss_2_XX_XXXX_YYMMDDhhmm;

typedef struct
{
    S_D07_YYMMDDhhmmss            sBgnTime;      // ??????         6 * 1
    S_D07_YYMMDDhhmmss            sEndTime;      // ???????         6 * 1 
    float fXXX_XXX;
}S_D07_YYMMDDhhmmss_XX_XXXX_YYMMDDhhmmss;





typedef struct
{
    double dForthHavePowerIcr;     // ????????????? ????????????????     XXXXXX.XX
    double dBackHavePowerIcr;   // ????????????? ????????????????      XXXXXX.XX
    double dCombNone1PowerIcr;    // ????????????? ??????1????????     XXXXXX.XX
    double dCombNone2PowerIcr;    // ????????????? ??????2????????     XXXXXX.XX
    
}S_D07_EventRecordVoltPhase;

typedef struct
{
    float fVolt;                // ????????????? ??? ???? XXX.X
    float fElec;                // ?????????????    ????      XXX.XXX
    float fHavePowerRate;        // ????????????? ????????  XX.XXXX
    float fNonePowerRate;        // ????????????? ???????  XX.XXXX    
    float fPowerRateFactor;        // ????????????? ????????  X.XXX
}S_D07_EventRecordFactor;


typedef struct
{
    double    dAtimeTotal;        // ?????????? ??????    XXXXXX.XX
    double    dAtimePhaseA;        // ?????????? A?????   XXXXXX.XX
    double    dAtimePhaseB;        // ?????????? B?????   XXXXXX.XX
    double    dAtimePhaseC;        // ?????????? C?????   XXXXXX.XX
}S_D07_EventRecordAtime; // ?????

typedef struct
{
    S_D07_YYMMDDhhmmss            sBgnTime;      // ??????         6 * 1
    S_D07_YYMMDDhhmmss            sEndTime;      // ???????         6 * 1
    S_D07_EventRecordVoltPhase sPowerTotal; // ?????????       4 * 8
    S_D07_EventRecordVoltPhase sPowerA;         // A?????????         4 * 8
    S_D07_EventRecordFactor       sFactorA;    // A??????            5 * 4
    S_D07_EventRecordVoltPhase sPowerB;         // B?????????        4 * 8 
    S_D07_EventRecordFactor       sFactorB;    // B??????             5 * 4
    S_D07_EventRecordVoltPhase sPowerC;     // C?????????         4 * 8
    S_D07_EventRecordFactor    sFactorC;    // C??????            5 * 4
    S_D07_EventRecordAtime     sAtime;      // ?????              4 * 8
    
}S_D07_LESS_LOSS_VOLT;// ???????????????????????????  35 * 4 + 12 = 152???



typedef struct
{
    S_D07_YYMMDDhhmmss            sBgnTime;       // ??????    6 * 1    
    S_D07_YYMMDDhhmmss            sEndTime;       // ???????    6 * 1
    S_D07_EventRecordVoltPhase sPowerTotal;    // ?????????  4 * 8
    S_D07_EventRecordVoltPhase sPowerA;           // A????????? 4 * 8
    S_D07_EventRecordVoltPhase sPowerB;           // B????????? 4 * 8
    S_D07_EventRecordVoltPhase sPowerC;        // C????????? 4 * 8
    
}S_D07_EventRevPhase; // ??? ????????    ??(140)???

typedef struct
{
    S_D07_YYMMDDhhmmss            sBgnTime;              // ??????
    S_D07_YYMMDDhhmmss            sEndTime;              // ???????
    float                        fMaxUnbalanceFator;     // ????????
    S_D07_EventRecordVoltPhase sPowerTotal;          // ?????????  4 * 8
    S_D07_EventRecordVoltPhase sPowerA;                   // A????????? 4 * 8
    S_D07_EventRecordVoltPhase sPowerB;                   // B????????? 4 * 8
    S_D07_EventRecordVoltPhase sPowerC;               // C????????? 4 * 8
    
}S_D07_EventUnBalance; //???????????


typedef struct
{
    S_D07_YYMMDDhhmmss            sBgnTime;      // ??????         6 * 1
    S_D07_YYMMDDhhmmss            sEndTime;      // ???????         6 * 1
    S_D07_EventRecordVoltPhase sPowerTotal; // ?????????       4 * 8
    S_D07_EventRecordVoltPhase sPowerA;         // A?????????         4 * 8
    S_D07_EventRecordFactor       sFactorA;    // A??????            5 * 4
    S_D07_EventRecordVoltPhase sPowerB;         // B?????????        4 * 8 
    S_D07_EventRecordFactor       sFactorB;    // B??????             5 * 4
    S_D07_EventRecordVoltPhase sPowerC;     // C?????????         4 * 8
    S_D07_EventRecordFactor    sFactorC;    // C??????            5 * 4
    //S_D07_EventRecordAtime     sAtime;      // ?????              4 * 8
    
}S_D07_LESS_MORE_LOSS_ELET;// ?????????????????????????????  35 * 4 + 12 = 152???


typedef struct
{
    UINT32 ulMonitorVoltMinutes;  // ?????? ??????
    float fVoltPassPercent;      // ????????
    float fVoltOverLimitPercent; // ?????????
    UINT32 ulVoltOverUpperLimitMinutes;  // ????????????
    UINT32 ulVoltOverLowerLimitMinutes;  // ????????????
    float fVoltValueMax;                // ???????
    float fVoltValueMin;                // ????????
    S_D07_MMDDhhmm sTimeVoltValueMax;       // ????????????      
    S_D07_MMDDhhmm sTimeVoltValueMin;         // ????????????
}S_D07_EventPassPercent; // ????????????



typedef struct
{
    S_D07_YYMMDDhhmmss sProgTime;         // ??????????
    UINT8              programer[4];      // ??????? 4???
    UINT32               ulRulerID[10];     // ???????????????????? 0xFFFFFFFF ??????0xFFFFFFFF????
}S_D07_EventMeterProgram; // ????????? 


typedef struct
{    
    double dForthHavePower; // XXXXXX.XX ???? ?????????
    double dBackHavePower;  // XXXXXX.XX ???? ?????????
    double dNonePowerQuad1; // XXXXXX.XX ?????????? 1 ???????????
    double dNonePowerQuad2; // XXXXXX.XX ?????????? 2 ???????????
    double dNonePowerQuad3; // XXXXXX.XX ?????????? 3 ???????????
    double dNonePowerQuad4; // XXXXXX.XX ?????????? 4 ???????????
}S_D07_EventPower;

typedef struct
{

    S_D07_XX_XXXX_YYMMDDhhmm sFortHaveDemand;   // ????????????????????????     XX.XXXX YYMMDDhhmm
    S_D07_XX_XXXX_YYMMDDhhmm sBackHaveDemand;   // ????????????????????????    XX.XXXX    YYMMDDhhmm
    S_D07_XX_XXXX_YYMMDDhhmm sNoneDemandQuad1;  // ????????????????????????    XX.XXXX    YYMMDDhhmm
    S_D07_XX_XXXX_YYMMDDhhmm sNoneDemandQuad2;  // ????????????????????????    XX.XXXX    YYMMDDhhmm
    S_D07_XX_XXXX_YYMMDDhhmm sNoneDemandQuad3;  // ????????????????????????    XX.XXXX    YYMMDDhhmm
    S_D07_XX_XXXX_YYMMDDhhmm sNoneDemandQuad4;  // ????????????????????????    XX.XXXX    YYMMDDhhmm

}S_D07_EventDemand; //?????????????????????????????????

typedef struct
{

    S_D07_YYMMDDhhmmss sOccurTime;       // ??????????
    UINT8              operator[4];      // ???????? 4???

    S_D07_EventDemand    sTotal;             // ???????? ?? ????????
    S_D07_EventDemand    sPhaseA;         // ???????? A??????????
    S_D07_EventDemand    sPhaseB;         // ???????? B??????????
    S_D07_EventDemand    sPhaseC;         // ???????? C??????????
}S_D07_EventDemandClear;

typedef struct
{
    S_D07_YYMMDDhhmmss sOccurTime;       // ??????????
    UINT8              operator[4];      // ???????? 4???

    S_D07_EventPower    sTotal;             // ???????? ?? ????????
    S_D07_EventPower    sPhaseA;         // ???????? A?????????
    S_D07_EventPower    sPhaseB;         // ???????? B?????????
    S_D07_EventPower    sPhaseC;         // ???????? C?????????

}S_D07_EventMeterClear; // ?????0??????


typedef struct
{
    S_D07_YYMMDDhhmmss sOccurTime;       // ??????????
    UINT8              operator[4];      // ???????? 4???
    UINT32               ulEventID;         // ??????????
}S_D07_EventClear;         // ?????????


typedef struct
{
    UINT8              operator[4]; // ???????? 4???
    S_D07_YYMMDDhhmmss sBefTime;    // ???????     
    S_D07_YYMMDDhhmmss sAftTime;     // ????????
    
}S_D07_EventTiming;        // ?????????

typedef struct
{
    UINT8 MM;
    UINT8 DD;
    UINT8 NN;    
}S_D07_MMDDNN;

typedef struct
{
    S_D07_YYMMDDhhmmss sOccurTime;       // ??????????
    UINT8              operator[4];      // ???????? 4???
    S_D07_MMDDNN       sZoneSet1[14];    // ??????????????(1~14)?????????
    S_D07_MMDDNN       sZoneSet2[14];    // ??????????????(1~14)?????????
}S_D07_EventZone; // ?????????????

typedef struct
{
    S_D07_YYMMDDhhmmss sOccurTime;       // ??????????
    UINT8              operator[4];      // ???????? 4???
    UINT8               ucTableNum;         // ????????????????????
}S_D07_EventWeekDay;   // ??????????


typedef struct
{
    UINT8 DD;
    UINT8 hh;
}S_D07_DDhh;

typedef struct
{
    UINT8 YY;
    UINT8 MM;
    UINT8 DD;
    UINT8 NN;
    
}S_D07_YYMMDDNN;

typedef struct
{
    UINT8 YY;
    UINT8 MM;
    UINT8 DD;
    UINT8 hh;
    UINT8 mm;
    UINT8 NN;    
}S_D07_YYMMDDhhmmNN;

typedef struct
{

    S_D07_YYMMDDhhmmss sOccurTime;       // ??????????
    UINT8              operator[4];      // ???????? 4???

    S_D07_YYMMDDNN  sHoliday[12];        
    // ?????????????11?? ?????????????????????????????????????????????????
    // ??????N????????? ??????????254???????
    // 
    
}S_D07_EventHoliday; // ?????????????


typedef struct
{

    S_D07_YYMMDDhhmmss sOccurTime;       // ??????????
    UINT8              operator[4];      // ???????? 4???
    UINT8               ucWord;             // ????????????????????????????
}S_D07_EventCombPower; // ????/?????????????

typedef struct
{
    S_D07_YYMMDDhhmmss sOccurTime;       // ??????????
    UINT8              operator[4];      // ???????? 4???
    S_D07_DDhh         sDay1;
    S_D07_DDhh         sDay2;
    S_D07_DDhh         sDay3;
}S_D07_EventPayoff;

typedef struct
{

    S_D07_YYMMDDhhmmss sBgnTime;       // ??????
    S_D07_YYMMDDhhmmss sEndTime;       // ??????? 
    S_D07_EventPower sPowerBeforOpen;  // ?????????????
    S_D07_EventPower sPowerAfterOpen;  // ????????????

}S_D07_EventOpenCap;        // ???????

typedef struct
{
    UINT8 YY;
    UINT8 MM;
    UINT8 DD;
    UINT8 WW;
}S_D07_YYMMDDWW;

typedef struct
{
    S_D07_MMDDNN MMDDNN[14];
    
}S_D07_MMDDNN_14;




typedef struct
{
    BOOL bRateErr;  // ????????
    BOOL bDayErr;   // ?????????
    BOOL bYearErr;  // ?????????
    BOOL bCommErr;  // ????????????
    BOOL bPwdErr;   // ???????????
    BOOL bNoneReq;  // ???????????
    BOOL bOtherErr; // ????????
}S_D07_ERR;


/* ???????????? */
typedef union
{

    float   fPower; 
    S_D07_YYMMDDWW sYYMMDDWW;
    S_D07_ERR      sError;
}U_D07_DATA_UNPACK;

/* ????????????? */
typedef struct
{
    
    UINT8                  ctrl_c;           /* ?????? ????? */
    UINT8                  lead_num;         /* ?????? 0xFE????? */
    UINT32                 ruler_id;         /* ???ID */
   
    unsigned short           data_len;         /* ?????? */
    unsigned short         frame_len;         /* ???????*/
      
    E_D07_RULER_TYPE       type;             /* ??????? */
    E_D07_RULER_FORMAT     format;           /* ????????? */
    E_D07_UNPD_FLG         flag;             /* ???????????????????????????????? ????data_unpack ?????? */
    S_D07_CTRL_CODE        ctrl_s;           /* ??????? */
    S_D07_RULER_PARA       para;             /* ??????????????? */ 
    UINT8                  data_pack[D07_DATA_MAX_NR];   /* ?????? ?????????ID????? ???????? */
    UINT8                  address[D07_ADDR_LEN+1];     //12???????????
    U_D07_DATA_UNPACK      data_unpack;               /* ?????????????? */ 
    //UINT8   *pDataUser;
}S_D07_UNPACK;


/* ??????? */

/* ??????ID ?????????????????????? */
int get_d07_ruler_info(UINT32 rulerID, S_D07_RULER_INFO *outRulerInfo);
int get_d07_ruler_id(E_D07_RULER_TYPE type,
                     S_D07_RULER_PARA para,
                     UINT32 *poutRulerID);
/* ?????? ???ID ??????????????? ??? */
int pack_d07_frame_by_data(S_D07_PACK_FRAME *inPara, char *outBuffer, int *outLength); 

//???? dlt645 07? 
int unpack_d07_frame(void *inpBuffer, int inBufferLength, S_D07_UNPACK *outpFrame);


/* ???????????????????????dlt645 2007????????????? */
int get_d07_first_valid_frame(const UINT8 *pBuf,         // ???????buf
                              UINT16 usLenBuf,           // ???????buf?????
                              UINT8  **ppFirstPos,       // ????buffer
                              UINT16 *pusLenFrame);      // ???Frame?????
/* ????????????????? */
int is_right_d07_frame(void *inpBuffer, int inBufferLength);
/* */
void d07_str2bcd(const char *pstr, UINT8 *pbcd, int len);
void d07_bcd2str(const char* inBCD, char *outStr, int len);
double d07_bcd_to_double(UINT8* pBcd, int len,int LeftDigit);
int d07_remove_dot(int len, char*inArray, char *outArray); // ??????????????????????

int d07_add_dot(int len, char*inArray, char *outArray,  int dotpos); // ??????????

/* ?????????? */
eD07Err trans_d07ctrl_struct2char(UINT8 *outChar, S_D07_CTRL_CODE *inStruct); //????????????
eD07Err trans_d07ctrl_char2struct(UINT8 inChar,  S_D07_CTRL_CODE *outStruct); //??????????




/* ??????????? */
/*XX*/
eD07Err trans_d07_data_XX_2(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_3(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_4(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_6(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_8(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_10(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_16(E_D07_TRANS_FLG flag, char *user, char *frame);

eD07Err trans_d07_data_XXXXXX_2(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XXXXXX_6(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XXXX(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XXXXXX(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XXX_X(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XXX_XXX(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_XXXX(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XXXXXXXX(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XXXXXX_XX(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_XXXX_YYMMDDhhmm(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_XXXX_8(E_D07_TRANS_FLG flag, char *user, char *frame);
/*NN*/
eD07Err trans_d07_data_NN(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_NNNN(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_NN_4(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_NN_6(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_NN_32(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_N_NNN(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_NN_NNNN(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_NNN_N(E_D07_TRANS_FLG flag, char *user, char *frame);


/*X.X*/
eD07Err trans_d07_data_X_XXX(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_XX_XX(E_D07_TRANS_FLG flag, char *user, char *frame);

/*YYMMDDWWhhmmss*/
eD07Err trans_d07_data_hhmmss(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_MMDDhhmm(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_DDhh(E_D07_TRANS_FLG flag, char *user, char *frame);

eD07Err trans_d07_data_YYMMDDWW(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_YYMMDDNN(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_YYMMDDhhmm(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_YYMMDDhhmmNN(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_YYMMDDhhmmss(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_YYMMDDhhmmss_2(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_YYMMDDhhmmss_2_XX_XXXX_YYMMDDhhmm(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_YYMMDDhhmmss_XXX_XXX_YYMMDDhhmmss(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_MMDDNN_14(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_hhmmNN_14(E_D07_TRANS_FLG flag, char *user, char *frame);
/* ??????? */
eD07Err trans_d07_data_recd_loss_less_volt(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_anti_phase(E_D07_TRANS_FLG flag, char *user, char *frame);    // ????????????
eD07Err trans_d07_data_recd_un_balance(E_D07_TRANS_FLG flag, char *user, char *frame);    // ???????????    
eD07Err trans_d07_data_recd_less_more_loss_elec(E_D07_TRANS_FLG flag, char *user, char *frame);        // less more loss ????????????????????????
eD07Err trans_d07_data_recd_volt_pass_percent(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_meter_prog(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_meter_clear(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_demand_clear(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_event_clear(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_adjust_time(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_part_prog(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_zone_prog(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_weekday_prog(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_holiday_prog(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_power_prog(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_payoff_prog(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_open_meter_cap(E_D07_TRANS_FLG flag, char *user, char *frame);
eD07Err trans_d07_data_recd_open_btn_box(E_D07_TRANS_FLG flag, char *user, char *frame);

//????????
eD07Err trans_d07_data_err(E_D07_TRANS_FLG flag, char *user, char *frame);


#pragma pack(pop) 
#endif //__DLT645_2007_RULERS_H__

